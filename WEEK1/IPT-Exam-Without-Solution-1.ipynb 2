{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7bFX4eN0o9Ma"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:#f0f0f0;\">.....................\n",
    "    <span style=\"font-family: Arial; font-weight:bold;font-size:3.2em;color:#5d067d;\">ITP EXAM SET -1 (Without Solution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import Image\n",
    "Image('1.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hEaO0m08o9Mh"
   },
   "source": [
    "# 4 Questions X 5 Marks = 20 Marks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">1. Write a pseudocode and python program to Reverse a Given Number?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hint:**     \n",
    "\n",
    "             INPUT:12345\n",
    "\n",
    "             OUTPUT:54321"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### pseudocode:\n",
    "\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Input:  num\n",
    "(1) Initialize rev_num = 0\n",
    "(2) Loop while num > 0\n",
    "     (a) Multiply rev_num by 10 and add remainder of num  \n",
    "          divide by 10 to rev_num\n",
    "               rev_num = rev_num*10 + num%10;\n",
    "     (b) Divide num by 10\n",
    "(3) Return rev_num"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Python Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=int(input(\"Enter number: \"))\n",
    "rev=0\n",
    "while(n>0):\n",
    "    dig=n%10\n",
    "    rev=rev*10+dig\n",
    "    n=n//10\n",
    "print(\"Reverse of the number:\",rev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "rnECmnEyo9M2"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">2.Difference between break and continue statements?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jVJsD7XRo9M4"
   },
   "source": [
    "1. Break :\n",
    "    \n",
    "    \n",
    "2. Continue :\n",
    "  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Break statements exist in Python to exit or \"break\" a for or while conditional loop. When the loop ends, the code picks up from and executes the next line immediately following the loop that was broken. \n",
    "\n",
    "\n",
    "\n",
    "numbers = (1, 2, 3)\n",
    "num_sum = 0\n",
    "count = 0\n",
    "for x in numbers:\n",
    "        num_sum = num_sum + x\n",
    "        count = count + 1\n",
    "        print(count)\n",
    "        if count == 2:\n",
    "                break\n",
    "In this example, the loop will break after the count is equal to 2.\n",
    "\n",
    " \n",
    "\n",
    "The continue statement is used to skip code within a loop for certain iterations of the loop. After the code is skipped, the loop continues where it left off. \n",
    "\n",
    "\n",
    "\n",
    "for x in range(4):\n",
    "   if (x==2):\n",
    "      continue\n",
    "   print(x)\n",
    "\n",
    "This example would print all numbers from 0-4 except 2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_0buB1M4o9Mi"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">3.Write a program to print the sum of squares of first 10 natural numbers using lambda, map and reduce?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mylist2 = list(range(1,11))\n",
    "map2 = list(map(lambda x: x **2,mylist2))\n",
    "print(map2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_list = [3, 5, 7, 9, 11] \n",
    "print (\"The original list is : \" + str(test_list)) \n",
    "res = sum(map(lambda i : i * i, test_list)) \n",
    "print (\"The sum of squares of list is : \" + str(res)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "f9j1EIxDo9M6"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">4.Write a program to replace the last element in a list with another list?\n",
    "\n",
    "    * list1 = [1, 3, 5, 7, 9, 10]\n",
    "    \n",
    "    * lilst2 = [20, 40, 60, 80]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list1 = [1, 3, 5, 7, 9, 10]\n",
    "lilst2 = [20, 40, 60, 80]\n",
    "\n",
    "\n",
    "a=list1.pop(-1)\n",
    "lilst2.append(a)\n",
    "lilst2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "E_HG3-eMo9NS"
   },
   "source": [
    "# 5 Questions X 10 Marks = 50 Marks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">1. Write a pseudocode and python Program to Find the Sum of the Series: 1 + 1/2 + 1/3 + â€¦.. + 1/N?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### pseudocode:\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Python Code:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum(n): \n",
    "    i = 1\n",
    "    s = 0.0\n",
    "    for i in range(1, n+1): \n",
    "        s = s + 1/i; \n",
    "    return s; \n",
    "  \n",
    "\n",
    "n = 5\n",
    "print(\"Sum is\", round(sum(n), 6)) \n",
    "  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ecmvzWp-o9NH"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">2.Write a program that accepts a string from the user and calculate the number of digits and letters present in the string?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "string=str(input(\"Enter string:\"))\n",
    "count1=0\n",
    "count2=0\n",
    "for i in string:\n",
    "      if(i.isdigit()):\n",
    "            count1=count1+1\n",
    "      count2=count2+1\n",
    "print(\"The number of digits is:\")\n",
    "print(count1)\n",
    "print(\"The number of characters is:\")\n",
    "print(count2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RYzl6Uxso9NV"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">3.Two list of integers are given, create a third list by user defined function such that it should contain only odd numbers from the first list and even numbers from the second list?\n",
    "\n",
    "    * list1 = [10, 20, 23, 11, 17]\n",
    "    * list2 = [13, 43, 24, 36, 12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list1 = [10, 20, 23, 11, 17]\n",
    "list2 = [13, 43, 24, 36, 12]\n",
    "list3= list(filter(lambda x: (x % 2 == 1), list1)) \n",
    "list3= list(filter(lambda x: (x % 2 == 0), list1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "57p2YH0ao9Nf"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">4. Write a Program to print inverted half pyramid using an asterisk (star) (get the row count from the user)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "count = 4\n",
    "while(count>=1):\n",
    "    print('*'*count)\n",
    "    count = count-1"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FdePqYDTo9Nh"
   },
   "source": [
    "* * * * \n",
    "* * * \n",
    "* * \n",
    "*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6bBm1F6oo9Ny"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">5. Write a function to find the median of the given lists which are having odd and even count?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lst = [21,3,4,5,12]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2nd = [21,76,3,4,5,12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median = 4.5\n"
     ]
    }
   ],
   "source": [
    "def findMedian(a, n): \n",
    "  \n",
    "    # First we sort the array \n",
    "    sorted(a) \n",
    "  \n",
    "    # check for even case \n",
    "    if n % 2 != 0: \n",
    "        return float(a[n / 2]) \n",
    "      \n",
    "    return float((a[int((n-1)/2)] +\n",
    "                  a[int(n / 2)])/2.0) \n",
    "  \n",
    "# Driver program \n",
    "a = [ 1, 3, 4, 2, 7, 5, 8, 6 ] \n",
    "n = len(a) \n",
    "print(\"Median =\", findMedian(a, n)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 Questions X 30 Marks = 30 Marks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wzRhch7Uo9OO"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">1.A Write a program which accepts range of numbers from the user and prints all the armstrong numbers in that given interval?(10 MARKS)\n",
    "  \n",
    "  \n",
    "  * Note :A number is called Armstrong number if it is equal to the sum of the cubes of its own digits. \n",
    "            For example: 407 is an Armstrong number since 407 = 4*4*4 + 0*0*0 + 7*7*7\n",
    "   \n",
    "   * Output : Armstrong nos. in the given range (100,1000) - 153, 370, 371, 407\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "153\n",
      "370\n",
      "371\n",
      "407\n",
      "1634\n"
     ]
    }
   ],
   "source": [
    "lower = 100\n",
    "upper = 2000\n",
    "\n",
    "# To take input from the user\n",
    "# lower = int(input(\"Enter lower range: \"))\n",
    "# upper = int(input(\"Enter upper range: \"))\n",
    "\n",
    "for num in range(lower, upper + 1):\n",
    "\n",
    "   # order of number\n",
    "   order = len(str(num))\n",
    "    \n",
    "   # initialize sum\n",
    "   sum = 0\n",
    "\n",
    "   # find the sum of the cube of each digit\n",
    "   temp = num\n",
    "   while temp > 0:\n",
    "       digit = temp % 10\n",
    "       sum += digit ** order\n",
    "       temp //= 10\n",
    "\n",
    "   if num == sum:\n",
    "       print(num)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "OmLB5YSpo9Og"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">1.B Write a Python program to check the validity of password input by users?(10 MARKS)\n",
    "\n",
    "1.   List item\n",
    "2.   List item\n",
    "\n",
    "\n",
    "    * At least 1 letter between [a-z] and 1 letter between [A-Z].\n",
    "    * At least 1 number between [0-9].\n",
    "    * At least 1 character from [$#@].\n",
    "    * Minimum length 6 characters.\n",
    "    * Maximum length 16 characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valid Password\n"
     ]
    }
   ],
   "source": [
    "import re \n",
    "password = \"R@m@_f0rtu9e$\"\n",
    "flag = 0\n",
    "while True:   \n",
    "    if (len(password)<8): \n",
    "        flag = -1\n",
    "        break\n",
    "    elif not re.search(\"[a-z]\", password): \n",
    "        flag = -1\n",
    "        break\n",
    "    elif not re.search(\"[A-Z]\", password): \n",
    "        flag = -1\n",
    "        break\n",
    "    elif not re.search(\"[0-9]\", password): \n",
    "        flag = -1\n",
    "        break\n",
    "    elif not re.search(\"[_@$]\", password): \n",
    "        flag = -1\n",
    "        break\n",
    "    elif re.search(\"\\s\", password): \n",
    "        flag = -1\n",
    "        break\n",
    "    else: \n",
    "        flag = 0\n",
    "        print(\"Valid Password\") \n",
    "        break\n",
    "  \n",
    "if flag ==-1: \n",
    "    print(\"Not a Valid Password\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|****\n",
      "|*\n",
      "|***\n",
      "|**\n",
      "|*****\n"
     ]
    }
   ],
   "source": [
    "def pattern(n): \n",
    "  \n",
    "    # traverse through the elements \n",
    "    # in n assuming it as a string \n",
    "    for i in n: \n",
    "  \n",
    "        # print | for every line \n",
    "        print(\"|\", end = \"\") \n",
    "  \n",
    "        # print i number of * s in  \n",
    "        # each line \n",
    "        print(\"*\" * int(i)) \n",
    "  \n",
    "        \n",
    "n = \"41325\"\n",
    "pattern(n) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|*\n",
      "|**\n",
      "|***\n",
      "|****\n",
      "|*****\n",
      "|******\n",
      "|*******\n",
      "|********\n",
      "|*********\n"
     ]
    }
   ],
   "source": [
    "n='123456789'\n",
    "pattern(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-GqiNBS3o9PH"
   },
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#5d067d;\">3.C Write a program to print Fibonacci Series?(10 MARKS)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def printPascal(n) : \n",
    "      \n",
    "    # Iterate through every line  \n",
    "    # and print entries in it \n",
    "    for line in range(0, n) : \n",
    "          \n",
    "        # Every line has number of  \n",
    "        # integers equal to line \n",
    "        # number \n",
    "        for i in range(0, line + 1) : \n",
    "            print(binomialCoeff(line, i), \n",
    "                \" \", end = \"\") \n",
    "        print() \n",
    "      \n",
    "  \n",
    "# See https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/ \n",
    "# for details of this function \n",
    "def binomialCoeff(n, k) : \n",
    "    res = 1\n",
    "    if (k > n - k) : \n",
    "        k = n - k \n",
    "    for i in range(0 , k) : \n",
    "        res = res * (n - i) \n",
    "        res = res // (i + 1) \n",
    "      \n",
    "    return res \n",
    "  \n",
    "# Driver program \n",
    "n = 7\n",
    "printPascal(n) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "n=int(input(\"Enter number of rows: \"))\n",
    "a=[]\n",
    "for i in range(n):\n",
    "    a.append([])\n",
    "    a[i].append(1)\n",
    "    for j in range(1,i):\n",
    "        a[i].append(a[i-1][j-1]+a[i-1][j])\n",
    "    if(n!=0):\n",
    "        a[i].append(1)\n",
    "for i in range(n):\n",
    "    print(\"   \"*(n-i),end=\" \",sep=\" \")\n",
    "    for j in range(0,i+1):\n",
    "        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def pypart2(n): \n",
    "      \n",
    "    # number of spaces \n",
    "    k = 2*n - 2\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "    for i in range(0, n): \n",
    "      \n",
    "        # inner loop to handle number spaces \n",
    "        # values changing acc. to requirement \n",
    "        for j in range(0, k): \n",
    "            print(end=\" \") \n",
    "      \n",
    "        # decrementing k after each loop \n",
    "        k = k - 2\n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "        # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "            # printing stars \n",
    "            print(\"* \", end=\"\") \n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "# Driver Code \n",
    "n = 5\n",
    "pypart2(n) \n",
    "Output:\n",
    "\n",
    "        * \n",
    "      * * \n",
    "    * * * \n",
    "  * * * * \n",
    "* * * * * "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def triangle(n): \n",
    "      \n",
    "    # number of spaces \n",
    "    k = 2*n - 2\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "    for i in range(0, n): \n",
    "      \n",
    "        # inner loop to handle number spaces \n",
    "        # values changing acc. to requirement \n",
    "        for j in range(0, k): \n",
    "            print(end=\" \") \n",
    "      \n",
    "        # decrementing k after each loop \n",
    "        k = k - 1\n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "        # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "            # printing stars \n",
    "            print(\"* \", end=\"\") \n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "# Driver Code \n",
    "n = 5\n",
    "triangle(n) \n",
    "Output:\n",
    "\n",
    "    * \n",
    "   * * \n",
    "  * * * \n",
    " * * * * \n",
    "* * * * * "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def numpat(n): \n",
    "      \n",
    "    # initialising starting number  \n",
    "    num = 1\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "    for i in range(0, n): \n",
    "      \n",
    "        # re assigning num \n",
    "        num = 1\n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "            # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "                # printing number \n",
    "            print(num, end=\" \") \n",
    "          \n",
    "            # incrementing number at each column \n",
    "            num = num + 1\n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "# Driver code \n",
    "n = 5\n",
    "numpat(n) \n",
    "Output:\n",
    "\n",
    "1 \n",
    "1 2 \n",
    "1 2 3 \n",
    "1 2 3 4 \n",
    "1 2 3 4 5 \n",
    "Numbers without re assigning\n",
    "filter_none\n",
    "edit\n",
    "play_arrow\n",
    "\n",
    "brightness_4\n",
    "# Python 3.x code to demonstrate star pattern \n",
    "  \n",
    "# Function to demonstrate printing pattern of numbers \n",
    "def contnum(n): \n",
    "      \n",
    "    # initializing starting number  \n",
    "    num = 1\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "    for i in range(0, n): \n",
    "      \n",
    "        # not re assigning num \n",
    "        # num = 1 \n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "        # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "            # printing number \n",
    "            print(num, end=\" \") \n",
    "          \n",
    "            # incrementing number at each column \n",
    "            num = num + 1\n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "n = 5\n",
    "  \n",
    "# sending 5 as argument \n",
    "# calling Function \n",
    "contnum(n) \n",
    "Output:\n",
    "\n",
    "1 \n",
    "2 3 \n",
    "4 5 6 \n",
    "7 8 9 10 \n",
    "11 12 13 14 15 \n",
    "Character Pattern\n",
    "filter_none\n",
    "edit\n",
    "play_arrow\n",
    "\n",
    "brightness_4\n",
    "# Python 3.x code to demonstrate star pattern \n",
    "  \n",
    "# Function to demonstrate printing pattern of alphabets \n",
    "def alphapat(n): \n",
    "      \n",
    "    # initializing value corresponding to 'A'  \n",
    "    # ASCII value \n",
    "    num = 65\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "    # 5 in this case \n",
    "    for i in range(0, n): \n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "        # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "            # explicitely converting to char \n",
    "            ch = chr(num) \n",
    "          \n",
    "            # printing char value  \n",
    "            print(ch, end=\" \") \n",
    "      \n",
    "        # incrementing number \n",
    "        num = num + 1\n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "# Driver Code \n",
    "n = 5\n",
    "alphapat(n) \n",
    "Output:\n",
    "\n",
    "A \n",
    "B B \n",
    "C C C \n",
    "D D D D \n",
    "E E E E E \n",
    "Continuous Character pattern\n",
    "filter_none\n",
    "edit\n",
    "play_arrow\n",
    "\n",
    "brightness_4\n",
    "# Python code 3.x to demonstrate star pattern \n",
    "  \n",
    "# Function to demonstrate printing pattern of alphabets \n",
    "def  contalpha(n): \n",
    "      \n",
    "    # initializing value corresponding to 'A'  \n",
    "    # ASCII value \n",
    "    num = 65\n",
    "  \n",
    "    # outer loop to handle number of rows \n",
    "-   for i in range(0, n): \n",
    "      \n",
    "        # inner loop to handle number of columns \n",
    "        # values changing acc. to outer loop \n",
    "        for j in range(0, i+1): \n",
    "          \n",
    "            # explicitely converting to char \n",
    "            ch = chr(num) \n",
    "          \n",
    "            # printing char value  \n",
    "            print(ch, end=\" \") \n",
    "          \n",
    "            # incrementing at each column \n",
    "            num = num +1\n",
    "      \n",
    "      \n",
    "        # ending line after each row \n",
    "        print(\"\\r\") \n",
    "  \n",
    "# Driver code \n",
    "n = 5\n",
    "contalpha(n) \n",
    "Output:\n",
    "\n",
    "A \n",
    "B C \n",
    "D E F \n",
    "G H I J "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def Fibonacci(n): \n",
    "    if n<0: \n",
    "        print(\"Incorrect input\") \n",
    "    # First Fibonacci number is 0 \n",
    "    elif n==0: \n",
    "        return 0\n",
    "    # Second Fibonacci number is 1 \n",
    "    elif n==1: \n",
    "        return 1\n",
    "    else: \n",
    "        return Fibonacci(n-1)+Fibonacci(n-2) \n",
    "  \n",
    "# Driver Program \n",
    "  \n",
    "print(Fibonacci(9)) \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[32.0, 50.0, 68.18, 94.1]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Celsius to Fahrenheit\n",
    "celsius = [0,10,20.1,34.5]\n",
    "\n",
    "fahrenheit = [((9/5)*temp + 32) for temp in celsius ]\n",
    "\n",
    "fahrenheit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"font-family: Arial; font-weight:bold;font-size:3em;color:#95b80b;\"> THE END"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "IPT-Exam-Sampleset-New (1).ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
